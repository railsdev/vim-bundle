class Api::ConsumersController < Api::ApiController
  # skip_before_filter  :verify_authenticity_token # MOVED TO api_controller.rb
  before_action :already_login_consumer, except: [:consumer_registration, :consumer_logout, :consumer_update_profile, :get_care_providers, :get_consumer_profile, :add_care_provider, :remove_care_provider]
  def consumer_login      
    @bio = {yes: true, no: false}
    @consumer = Consumer.authenticate(params[:email], params[:consumer_name]) #, iws_device_id: params[:iws_device_id]
    if @consumer.blank?
      render json: {:message => "Invalid Login", :response_code => 1101} unless params[:consumer_name].nil?
      render json: {:message => "Invalid Login", :response_code => 1100} unless params[:email].nil?
    else
      sign_count = @consumer.sign_in_count.to_i
      if @bio[:yes]  
        @consumer.update(sign_in_count: 0) 
        @consumer.create_api_key 
      elsif @consumer.api_key.present?
        render json: {:message => "Already Signed In", :response_code => 0111}
        return false     
      elsif (sign_count < 3)                       
        @consumer.update(sign_in_count: sign_count += 1) 
        render json: {:message => "invalid Login Attempt: #{sign_count}"} 
      else
        render json: {:message => "Biomeric Authentication Failed, Please you Login Through valid PassCode"} 
      end  
    end                          
  end

  def update_timezone
    @consumer_setting = ConsumerSetting.new(consumer_setting_params)
    @consumer_setting = @consumer_setting.time_zone
    if current_consumer.consumer_setting.update(time_zone: @consumer_setting)
      render json: {:message => "Time Zone Updated Successfully"}
    else
      render json: @consumer.errors, status: :unprocessable_entity
    end
  end
  def consumer_update_profile
    @consumer = current_consumer
    @consumer.sign_in_count = 0
    @consumer.consumer_image =params[:consumer][:consumer_image]
    if @consumer.update(consumer_params)
      render json: {:message => "Consumer Profile Updated Successfully"}
    else
      render json: @consumer.errors, status: :unprocessable_entity 
    end
  end

  def consumer_passcode_login
    @consumer = Consumer.find_by email: params[:email], pass_code: params[:pass_code]
    if @consumer.nil?
      render json: {:message => 'Invalid Email or Passcode'}
      return false
    elsif @consumer.api_key.present?
      render json: {:message => "Already Signed in through passcode"}
      return false   
    elsif @consumer.sign_in_count == 3
      @consumer.create_api_key
      @consumer.update(sign_in_count: 0)
    else
      render json: {:message => "Please Login through your email"}
      return false   
    end
  end


  def consumer_registration
    @consumer = Consumer.new(consumer_params)
    @consumer_setting = ConsumerSetting.new(consumer_setting_params)
    @consumer_setting = @consumer_setting.time_zone
    @consumer.consumer_image =params[:consumer][:consumer_image]
    @consumer.sign_in_count = 0
    if @consumer.save
      @api_key = @consumer.create_api_key 
      @consumer.create_consumer_setting(time_zone: @consumer_setting)
    else
      (render json: @consumer.errors.messages.merge(response_code: 1100) and return false) if @consumer.errors.messages.keys.include?(:email)
      (render json: @consumer.errors.messages.merge(response_code: 1011) and return false) if @consumer.errors.messages.keys.include?(:consumer_name)
      render json: @consumer.errors, status: :unprocessable_entity 
    end
  end

  def get_consumer_profile
    if current_consumer
      @consumer = current_consumer
      current_consumer.touch(:last_signed_in_at)
    end
  end

  def consumer_logout
    if current_consumer.present?
      @status = current_consumer.api_key.destroy if current_consumer.api_key.access_token == request.headers["token"] 
    end
  end

  def get_care_providers
    @care_providers = current_consumer.providers
  end

  def remove_care_provider
    @care_provider = current_consumer.providers.destroy(Provider.find(params[:provider_id].to_i)) if params[:provider_id].present?
  end

  def add_care_provider
    @care_provider = ConsumersProviders.find_or_create_by(provider_id: params[:provider_id].to_i, consumer_id: current_consumer.id).provider if params[:provider_id].present?
  end

  private

  def consumer_params
    params[:consumer][:consumer_image] = params[:consumer][:consumer_image]#.gsub(/\s/,'+')
    params.require(:consumer).permit(:first_name, :last_name, :phone_number, :email, :consumer_name, :pass_code, :consumer_image, :device_id, :person_id, :device_type, :isd_code, :time_zone)        
  end

  def  consumer_setting_params
    params.require(:consumer_setting).permit(:time_zone) 
  end

  def already_login_consumer
    # @consumer = Consumer.find_by email: params[:email]
    @consumer = Consumer.where("email = ? || consumer_name = ?", params[:email], params[:consumer_name]).take
    if @consumer.nil?
      # render json: {:message => "Invalid Login"}
      render json: {:message => "Invalid Login", :response_code => 1101} unless params[:consumer_name].nil?
      render json: {:message => "Invalid Login", :response_code => 1110} unless params[:email].nil?
      return false
    elsif @consumer.api_key.present?
      render json: {:message => "Already Logged In", :response_code => 0111}
      return false
    end
  end
end
