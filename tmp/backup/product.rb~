# == Schema Information
#
# Table name: products
#
#  id                 :integer          not null, primary key
#  product_name_short :string(255)
#  ndc9               :string(255)
#  is_active          :boolean
#  image_name         :string(255)
#  strength           :string(255)
#  brand_name         :string(255)
#  fda_form_name      :string(255)
#  created_at         :datetime
#  updated_at         :datetime
#

class Product < ActiveRecord::Base

  # Table columns
  self.table_name  = 'product'
  self.primary_key = 'ID'
  # alias_attribute 'ID', :id
  alias_attribute  :product_name_short, 'ProductNameShort'
  alias_attribute  :ndc9, 'NDC9'
  alias_attribute  :active, 'Active'
  alias_attribute  :image_name, 'ImageName'
  alias_attribute  :strength, 'Strength'
  alias_attribute  :branded_name_stub, 'BrandedNameStub'
  alias_attribute  :form_name, 'FormName'



  extend Calculations
  belongs_to :fda_form
  has_many :product_patient_educations
  has_many :patient_educations, through: :product_patient_educations
  has_one :product_image
  has_many :consumer_medications, as: :consumer_product, dependent: :destroy
  has_many :consumers, through: :consumer_medications, as: :consumer_product
  has_many :consumer_compliances,through: :consumer_medications
  has_one :product_attribute, dependent: :destroy
  has_many :product_ingredients

  def prescribed_for
    prescribed_for = []
    prescribed_for << self.try(:products_patient_education).try(:patient_education).try(:descr)
    prescribed_for << self.try(:products_patient_education).try(:patient_education).try(:contra)
    prescribed_for << self.try(:products_patient_education).try(:patient_education).try(:admin)
    prescribed_for << self.try(:products_patient_education).try(:patient_education).try(:missed)
    prescribed_for.compact.join("")
  end  

  def self.search_product keyword, pg
    @products = product.search("*"+keyword.to_s+"*",:conditions => {:is_active => "1"}, :page => pg, :per_page => PER_PAGE_RECORDS)
  end

  def image_url 
    if product_image.image_name.file.try(:exists?)
      "/api/products/get_product_icon.json?image_name="+product_image.image_name.file.basename
    else
      "/assets/no_product.jpg"
    end
  end  
end
