# Created by: Biju Vidyadharan
# Functionality for medication including getting the medication list, getting the product details
# adding the medications and deletion on medication.

class Api::MedicationsController < Api::ApiController
	# skip_before_filter  :verify_authenticity_token # MOVED TO api_controller.rb
	before_filter :find_consumer_medication, :only => :delete_my_med

	# Getting the list of medications for a consumer with given id and should be active.
	def get_my_med
		@my_medications = ConsumerMedication.includes(:consumer_product).where(consumer_id: current_consumer, is_active:true)
	end

	# Getting the of product details
	def get_product_details
    	@product = params[:product_type].constantize.where(id:params[:product_id]).take
    	# @consumer_medication = ConsumerMedication.where(consumer_product_id:params[:product_id], consumer_id: current_consumer, consumer_product_type: params[:product_type], is_active:true).take
    	@consumer_medication = current_consumer.consumer_medications.where(consumer_product_id: params[:product_id], consumer_product_type: params[:product_type], is_active: true).first
    	unless @consumer_medication.try(:consumer_product).nil?
	    	if @consumer_medication.present?
	    		@medication   = true
	            _reminder     = @consumer_medication.reminders.where(:is_active => true)
	    		@reminder     = _reminder.present?
	            @reminder_id  = _reminder.first.id if @reminder
	    	else
	    		@medication = false
	    		@reminder = false
	    	end
	    	# puts @product.inspect
	        if params[:product_type] == 'Product'
	          @patient_educations = @product.patient_educations.where(language: params[:language]).all
	        end
       end
  	end

  	# Adding the product for a consumer medication
	def add_my_med
		if params[:product_type].eql?"ConsumerCustomProduct"
			@consumer_custom_product = ConsumerCustomProduct.new(product_name_short:params[:name], description:params[:description])
			@consumer_custom_product.consumer_medications.create(consumer_id: current_consumer.id) if @consumer_custom_product.save
			@medication = ConsumerMedication.where(consumer_id: current_consumer.id, consumer_product_id:@consumer_custom_product.id,consumer_product_type:params[:product_type]).take
		elsif params[:product_type].eql?"Product"
			@consumer_product = Product.where(id:params[:product_id]).take
			if @consumer_product.present?
				if @consumer_product.consumer_medications.where(consumer_id: current_consumer.id, is_active:true).first.present?
					@consumer_product.consumer_medications.where(consumer_id: current_consumer.id).first
				else
					@consumer_product.consumer_medications.where(consumer_id: current_consumer.id, is_active: true).create
				end
				@medication = ConsumerMedication.where(consumer_id: current_consumer.id, consumer_product_id:@consumer_product.id,consumer_product_type:params[:product_type],is_active:true).take
			end
		end
	end

	# Soft deletion of medication (making it inactive).
	def delete_my_med
		@consumer_medication.update(is_active:false) if @consumer_medication.present?
	end

	# Uploading the custom image for medications.
	def consumer_medication_image_upload
		@product = ConsumerMedication.where(consumer_id: current_consumer.id, id: params[:consumer_medication_id])
		@product.map do |product|
			product.remote_consumer_medication_image_url = params[:consumer_medication_image_url]
			product.save!
		end
	end

	protected    
		# Getting the consumer_medication using id 
		def find_consumer_medication
    		@consumer_medication = ConsumerMedication.where(id:params[:consumer_medication_id]).take
		end

end

