require "test_helper"

class DailyReminderTest < ActiveSupport::TestCase

    def setup
      Reminder.destroy_all
      ScheduledReminder.destroy_all
      @reminder = Reminder.create!( fq_type: 'Daily', fq_time: Time.now, consumer_id: 1, consumer_medication_id: 1 )
      @reminder.reload
    end

    def test_reminders_default_values
      assert_equal "Daily", @reminder.fq_type
      assert @reminder.is_active
      assert @reminder.is_scheduled
    end

    # TODO: Setup logic to identify completed list of scheduled reminders
    def test_count_of_schedules_of_reminder
      assert_equal @reminder.queued_schedules_count, @reminder.scheduled_reminders.count
    end

    def test_destroy
      reminder_id = @reminder.id
      @reminder.destroy
      assert_empty ScheduledReminder.where(reminder_id: reminder_id).to_a
    end

    def test_count_of_scheduled_reminders
      assert_includes [30, 31], ((@reminder.scheduled_reminders.last.run_at - @reminder.scheduled_reminders.first.run_at) / 1.days).round
    end

    def test_different_of_time_between_scheduled_reminders
      faulty_scheduled_reminders = @reminder.scheduled_reminders.order('run_at').to_a.each_cons(2).select{|a, b| (b.run_at - a.run_at).to_i.seconds != 1.day.seconds }
      faulty_scheduled_reminders.must_be_empty
    end

    # def test_updation_of_reminder
    #   @reminder.update( fq_time: Time.now + 2.hours )
    #   test_reminders_default_values
    #   test_count_of_schedules_of_reminder
    #   test_count_of_scheduled_reminders
    #   test_different_of_time_between_scheduled_reminders
    # end

end
