module Calculations
  def get_consumer_compliances consumer, consumer_medication_id
    compliances = get_compliances_count consumer, consumer_medication_id
    taken_count = compliances.where(:status=>COMPLIANCE_STATUS_TAKEN).count
    return (taken_count.to_f/compliances.count.to_f*100).ceil if compliances.present?
  end

  def percentage_compliances(beg_of_month,end_of_month)
    Product.joins("LEFT JOIN `consumer_medications` ON `consumer_medications`.`consumer_product_id` = `products`.`ID` AND `consumer_medications`.`consumer_product_type` = 'Product' LEFT JOIN `consumers` ON `consumers`.`id` = `consumer_medications`.`consumer_id` LEFT JOIN `consumer_compliances` ON `consumer_compliances`.`consumer_medication_id` = `consumer_medications`.`id` AND `consumer_compliances`.`reminder_triggered_at` BETWEEN '#{beg_of_month}' AND '#{end_of_month}' WHERE `products`.`Active` = 1").
             select("(sum(case when consumer_compliances.status = 'taken' then 1 else 0 end)/count(consumer_compliances.id) * 100 ) as avg_count, count(consumers.id) as consumers_count, `products`.*").
             group("products.ID").
             order("avg_count desc")
  end

  private

  def get_compliances_count consumer, consumer_medication_id
    ConsumerCompliance.where(consumer_id:consumer, consumer_medication_id:consumer_medication_id)
  end


end
